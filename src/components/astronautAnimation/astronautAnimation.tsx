/* eslint-disable @typescript-eslint/no-unused-vars */
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/models/Astronaut_Animation.glb --transform --types --aggressive
Files: public/models/Astronaut_Animation.glb [236.34MB] > E:\code\github\kim agency\Marsa\Astronaut_Animation-transformed.glb [6.08MB] (97%)
*/
'use client'

import * as THREE from 'three'
import React, { useRef, useState } from 'react'
import { useGraph } from '@react-three/fiber'
import { useGLTF, useAnimations } from '@react-three/drei'
import { GLTF, SkeletonUtils } from 'three-stdlib'
import { useGSAP } from '@gsap/react'
import gsap from 'gsap'
import { ScrollTrigger } from 'gsap/ScrollTrigger'
import { Observer } from 'gsap/Observer'

gsap.registerPlugin(ScrollTrigger, useGSAP, Observer)

type ActionName = 'Action.001'

interface GLTFAction extends THREE.AnimationClip {
  name: ActionName
}

type GLTFResult = GLTF & {
  nodes: {
    BOOT: THREE.SkinnedMesh
    DETAILS: THREE.SkinnedMesh
    GEARS_1: THREE.SkinnedMesh
    GEARS_2: THREE.SkinnedMesh
    GLOVES: THREE.SkinnedMesh
    HELMET_1: THREE.SkinnedMesh
    HELMET_2: THREE.SkinnedMesh
    HELMET_3: THREE.SkinnedMesh
    PANTS: THREE.SkinnedMesh
    mesh001: THREE.SkinnedMesh
    mesh001_1: THREE.SkinnedMesh
    TORSO: THREE.SkinnedMesh
    mixamorigHips: THREE.Bone
  }
  materials: {
    BOOT: THREE.MeshStandardMaterial
    DETAILS: THREE.MeshStandardMaterial
    GEARS: THREE.MeshStandardMaterial
    ['Material.001']: THREE.MeshStandardMaterial
    GLOVES: THREE.MeshStandardMaterial
    HELMET: THREE.MeshStandardMaterial
    Material: THREE.MeshStandardMaterial
    PANTS: THREE.MeshStandardMaterial
    ['Material.005']: THREE.MeshStandardMaterial
    ['Fabric Pattern 06']: THREE.MeshStandardMaterial
    TORSO: THREE.MeshStandardMaterial
  }
  animations: GLTFAction[]
}

export function Model(props: JSX.IntrinsicElements['group']) {
  const group = React.useRef<THREE.Group | null>(null)
  const { scene, animations } = useGLTF('/models/Astronaut_Animation-transformed.glb')
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes, materials } = useGraph(clone) as GLTFResult
  const { actions, names } = useAnimations(animations, group)
  const section = document.getElementById('mascot')
  const [animationSpeed, setAnimationSpeed] = useState(1); // Initial speed
  const scrollTriggerRef = useRef<ScrollTrigger | null>(null);

  console.log(section)

  useGSAP(() => {
    const action = actions['Action.001']

    if (!action) {
      console.warn('AnimationName not found');
      return;
    }

    action.setLoop(THREE.LoopOnce, 1);
    action.clampWhenFinished = true;

    action.timeScale = animationSpeed;

    scrollTriggerRef.current = ScrollTrigger.create({
      trigger: section,
      pin: true,
      start: 'top top',
      end: 'bottom top',
      onUpdate: (self) => {
        action.time = self.progress * action.getClip().duration;
        console.log(`Progress: ${self.progress}, Action Time: ${action.time}`);
      },
      onEnter: () => action.play(),
      onLeave: () => action.paused = true,
      onEnterBack: () => action.play(),
      onLeaveBack: () => action.paused = true,
      markers: true, // Remove or set to false in production
    })

    // Animate timeScale with GSAP for smooth speed changes
    gsap.to(action, {
      timeScale: animationSpeed,
      duration: 1,
      ease: 'power1.inOut',
    });

    return () => {
      // Удаление конкретного ScrollTrigger при размонтировании
      if (scrollTriggerRef.current) {
        scrollTriggerRef.current.kill();
        scrollTriggerRef.current = null;
      }
    };
  }, [animationSpeed]);

  return (
    <group ref={group} {...props} dispose={null} scale={0.02}>
      <group name="Scene">
        <group name="Armature001" rotation={[Math.PI / 2, 0, 0]}>
          <primitive object={nodes.mixamorigHips} />
          <skinnedMesh name="BOOT" geometry={nodes.BOOT.geometry} material={materials.BOOT} skeleton={nodes.BOOT.skeleton} />
          <skinnedMesh name="DETAILS" geometry={nodes.DETAILS.geometry} material={materials.DETAILS} skeleton={nodes.DETAILS.skeleton} />
          <group name="GEARS">
            <skinnedMesh name="GEARS_1" geometry={nodes.GEARS_1.geometry} material={materials.GEARS} skeleton={nodes.GEARS_1.skeleton} />
            <skinnedMesh name="GEARS_2" geometry={nodes.GEARS_2.geometry} material={materials['Material.001']} skeleton={nodes.GEARS_2.skeleton} />
          </group>
          <skinnedMesh name="GLOVES" geometry={nodes.GLOVES.geometry} material={materials.GLOVES} skeleton={nodes.GLOVES.skeleton} />
          <group name="HELMET">
            <skinnedMesh name="HELMET_1" geometry={nodes.HELMET_1.geometry} material={materials.HELMET} skeleton={nodes.HELMET_1.skeleton} />
            <skinnedMesh name="HELMET_2" geometry={nodes.HELMET_2.geometry} material={materials.HELMET} skeleton={nodes.HELMET_2.skeleton} />
            <skinnedMesh name="HELMET_3" geometry={nodes.HELMET_3.geometry} material={materials.Material} skeleton={nodes.HELMET_3.skeleton} />
          </group>
          <skinnedMesh name="PANTS" geometry={nodes.PANTS.geometry} material={materials.PANTS} skeleton={nodes.PANTS.skeleton} />
          <group name="Patch">
            <skinnedMesh name="mesh001" geometry={nodes.mesh001.geometry} material={materials['Material.005']} skeleton={nodes.mesh001.skeleton} />
            <skinnedMesh name="mesh001_1" geometry={nodes.mesh001_1.geometry} material={materials['Fabric Pattern 06']} skeleton={nodes.mesh001_1.skeleton} />
          </group>
          <skinnedMesh name="TORSO" geometry={nodes.TORSO.geometry} material={materials.TORSO} skeleton={nodes.TORSO.skeleton} />
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/models/Astronaut_Animation-transformed.glb')
